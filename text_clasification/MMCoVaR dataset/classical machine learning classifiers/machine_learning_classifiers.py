{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:118: SyntaxWarning: invalid escape sequence '\\s'\n",
      "<>:118: SyntaxWarning: invalid escape sequence '\\s'\n",
      "C:\\Users\\Lukag\\AppData\\Local\\Temp\\ipykernel_5620\\3988082522.py:118: SyntaxWarning: invalid escape sequence '\\s'\n",
      "  text = re.sub('\\s+', ' ', text)\n",
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\Lukag\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     C:\\Users\\Lukag\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\Lukag\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\Lukag\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt_tab to\n",
      "[nltk_data]     C:\\Users\\Lukag\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt_tab is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger_eng to\n",
      "[nltk_data]     C:\\Users\\Lukag\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger_eng is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of data:  (677, 2)\n",
      "                                                text  target\n",
      "0  Article courtesy of Kenneth Kwok Co-President ...       1\n",
      "1  The FDA has quickly given the OK to the second...       1\n",
      "2  Tesla will temporarily shut down its car manuf...       1\n",
      "3  USA TODAY\\n\\nAs the novel coronavirus spreads ...       1\n",
      "4  Is it safe for me to go outside?\\n\\nFor most p...       1\n",
      "852.6873156342183\n",
      "354.4230769230769\n",
      "5243.563421828909\n",
      "2229.2781065088757\n",
      "443.27433628318585\n",
      "216.62130177514794\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is a sample text for cleaning \n",
      "sample text lemmatization cleaning\n",
      "Logistic Regression with TF-IDF\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.55      0.63      0.59        68\n",
      "           1       0.57      0.49      0.52        68\n",
      "\n",
      "    accuracy                           0.56       136\n",
      "   macro avg       0.56      0.56      0.56       136\n",
      "weighted avg       0.56      0.56      0.56       136\n",
      "\n",
      "Confusion Matrix: [[43 25]\n",
      " [35 33]]\n",
      "AUC: 0.5637975778546713\n",
      "\n",
      "Naive Bayes with TF-IDF\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.06      0.01      0.02        68\n",
      "           1       0.44      0.78      0.56        68\n",
      "\n",
      "    accuracy                           0.40       136\n",
      "   macro avg       0.25      0.40      0.29       136\n",
      "weighted avg       0.25      0.40      0.29       136\n",
      "\n",
      "Confusion Matrix: [[ 1 67]\n",
      " [15 53]]\n",
      "AUC: 0.29952422145328716\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Lukag\\AppData\\Local\\Temp\\ipykernel_5620\\3988082522.py:118: SyntaxWarning: invalid escape sequence '\\s'\n",
      "  text = re.sub('\\s+', ' ', text)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Negative values in data passed to MultinomialNB (input X)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 334\u001b[0m\n\u001b[0;32m    330\u001b[0m     roc_auc_rf \u001b[38;5;241m=\u001b[39m auc(fpr_rf, tpr_rf)\n\u001b[0;32m    331\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAUC:\u001b[39m\u001b[38;5;124m\"\u001b[39m, roc_auc_rf)\n\u001b[1;32m--> 334\u001b[0m \u001b[43manalysis_of_cleaned_texts\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msubmission.csv\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m    335\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Second part with ngrams\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    336\u001b[0m analysis_of_cleaned_texts(df_train, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msubmission.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, ngrams\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "Cell \u001b[1;32mIn[1], line 251\u001b[0m, in \u001b[0;36manalysis_of_cleaned_texts\u001b[1;34m(df, filename, ngrams)\u001b[0m\n\u001b[0;32m    249\u001b[0m \u001b[38;5;66;03m# Naive Bayes with Word2Vec\u001b[39;00m\n\u001b[0;32m    250\u001b[0m nb_tfidf \u001b[38;5;241m=\u001b[39m MultinomialNB()\n\u001b[1;32m--> 251\u001b[0m \u001b[43mnb_tfidf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train_vectors_w2v\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    252\u001b[0m y_predict \u001b[38;5;241m=\u001b[39m nb_tfidf\u001b[38;5;241m.\u001b[39mpredict(X_val_vectors_w2v)\n\u001b[0;32m    253\u001b[0m y_prob \u001b[38;5;241m=\u001b[39m nb_tfidf\u001b[38;5;241m.\u001b[39mpredict_proba(X_val_vectors_w2v)[:, \u001b[38;5;241m1\u001b[39m]\n",
      "File \u001b[1;32mc:\\Users\\Lukag\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:1473\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1466\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1468\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1469\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1470\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1471\u001b[0m     )\n\u001b[0;32m   1472\u001b[0m ):\n\u001b[1;32m-> 1473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfit_method\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\Lukag\\miniconda3\\Lib\\site-packages\\sklearn\\naive_bayes.py:759\u001b[0m, in \u001b[0;36m_BaseDiscreteNB.fit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    757\u001b[0m n_classes \u001b[38;5;241m=\u001b[39m Y\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]\n\u001b[0;32m    758\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_init_counters(n_classes, n_features)\n\u001b[1;32m--> 759\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_count\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mY\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    760\u001b[0m alpha \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_alpha()\n\u001b[0;32m    761\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_feature_log_prob(alpha)\n",
      "File \u001b[1;32mc:\\Users\\Lukag\\miniconda3\\Lib\\site-packages\\sklearn\\naive_bayes.py:881\u001b[0m, in \u001b[0;36mMultinomialNB._count\u001b[1;34m(self, X, Y)\u001b[0m\n\u001b[0;32m    879\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_count\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, Y):\n\u001b[0;32m    880\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Count and smooth feature occurrences.\"\"\"\u001b[39;00m\n\u001b[1;32m--> 881\u001b[0m     \u001b[43mcheck_non_negative\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mMultinomialNB (input X)\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m    882\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_count_ \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m safe_sparse_dot(Y\u001b[38;5;241m.\u001b[39mT, X)\n\u001b[0;32m    883\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclass_count_ \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m Y\u001b[38;5;241m.\u001b[39msum(axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n",
      "File \u001b[1;32mc:\\Users\\Lukag\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:1689\u001b[0m, in \u001b[0;36mcheck_non_negative\u001b[1;34m(X, whom)\u001b[0m\n\u001b[0;32m   1686\u001b[0m     X_min \u001b[38;5;241m=\u001b[39m xp\u001b[38;5;241m.\u001b[39mmin(X)\n\u001b[0;32m   1688\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m X_min \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m-> 1689\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNegative values in data passed to \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m whom)\n",
      "\u001b[1;31mValueError\u001b[0m: Negative values in data passed to MultinomialNB (input X)"
     ]
    }
   ],
   "source": [
    "import re\n",
    "import string\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import nltk\n",
    "\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.corpus import stopwords, wordnet\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "from gensim.models import Word2Vec\n",
    "from nltk.util import ngrams\n",
    "\n",
    "# Download required NLTK resources\n",
    "nltk.download('punkt')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "nltk.download('wordnet')\n",
    "nltk.download('stopwords')\n",
    "\n",
    "\n",
    "class TextClassifier:\n",
    "    \"\"\"\n",
    "    A class to preprocess text data, build vector representations (TF-IDF and Word2Vec),\n",
    "    and train/evaluate several classifiers on any given dataset.\n",
    "    \n",
    "    Additional parameters can be set via arguments.\n",
    "    \"\"\"\n",
    "\n",
    "    class MeanEmbeddingVectorizer:\n",
    "        \"\"\"\n",
    "        Helper class to compute a mean embedding for a list of tokens using a given Word2Vec model.\n",
    "        \"\"\"\n",
    "        def __init__(self, word2vec):\n",
    "            self.word2vec = word2vec\n",
    "            self.dim = len(next(iter(word2vec.values())))\n",
    "\n",
    "        def fit(self, X, y=None):\n",
    "            return self\n",
    "\n",
    "        def transform(self, X):\n",
    "            return np.array([\n",
    "                np.mean([self.word2vec[w] for w in words if w in self.word2vec]\n",
    "                        or [np.zeros(self.dim)], axis=0)\n",
    "                for words in X\n",
    "            ])\n",
    "\n",
    "    def __init__(self,\n",
    "                 df,\n",
    "                 text_column='text',\n",
    "                 target_column='target',\n",
    "                 use_ngrams=False,\n",
    "                 test_size=0.2,\n",
    "                 random_state=42,\n",
    "                 tfidf_params=None,\n",
    "                 lr_params=None,\n",
    "                 rf_params=None,\n",
    "                 w2v_params=None):\n",
    "        \"\"\"\n",
    "        Initialize the classifier with a pandas DataFrame and various hyperparameters.\n",
    "        \n",
    "        Parameters:\n",
    "          - df: pandas DataFrame containing the data.\n",
    "          - text_column: column name for raw text (default: 'text').\n",
    "          - target_column: column name for target labels (default: 'target').\n",
    "          - use_ngrams: whether to add bigrams and trigrams during tokenization (default: False).\n",
    "          - test_size: proportion of data to use for validation (default: 0.2).\n",
    "          - random_state: seed for train-test split and models (default: 42).\n",
    "          - tfidf_params: dict of parameters for TfidfVectorizer (default: {'use_idf': True}).\n",
    "          - lr_params: dict of parameters for LogisticRegression (default: {'solver': 'liblinear', 'C': 10, 'penalty': 'l1'}).\n",
    "          - rf_params: dict of parameters for RandomForestClassifier (default: {'n_estimators': 100, 'random_state': random_state}).\n",
    "          - w2v_params: dict of parameters for Word2Vec model (default: {'min_count': 1}).\n",
    "        \"\"\"\n",
    "        self.df = df.copy()\n",
    "        self.text_column = text_column\n",
    "        self.target_column = target_column\n",
    "        self.use_ngrams = use_ngrams\n",
    "        self.test_size = test_size\n",
    "        self.random_state = random_state\n",
    "\n",
    "        # Set default parameters if None provided\n",
    "        self.tfidf_params = tfidf_params if tfidf_params is not None else {'use_idf': True}\n",
    "        self.lr_params = lr_params if lr_params is not None else {'solver': 'liblinear', 'C': 10, 'penalty': 'l1'}\n",
    "        self.rf_params = rf_params if rf_params is not None else {'n_estimators': 100, 'random_state': self.random_state}\n",
    "        self.w2v_params = w2v_params if w2v_params is not None else {'min_count': 1}\n",
    "\n",
    "        # Preprocess the text data\n",
    "        self.df['clean_text'] = self.df[self.text_column].apply(self.finalpreprocess)\n",
    "\n",
    "        # Tokenize for Word2Vec\n",
    "        self.df['clean_text_tok'] = self.df['clean_text'].apply(word_tokenize)\n",
    "\n",
    "        # Train a Word2Vec model on the tokenized clean text\n",
    "        self.w2v_model = Word2Vec(self.df['clean_text_tok'], **self.w2v_params)\n",
    "        self.w2v = dict(zip(self.w2v_model.wv.index_to_key, self.w2v_model.wv.vectors))\n",
    "        self.mean_embedding_vectorizer = self.MeanEmbeddingVectorizer(self.w2v)\n",
    "\n",
    "    def preprocess(self, text):\n",
    "        \"\"\"\n",
    "        Basic text cleaning: lowercasing, removal of HTML tags, punctuation, extra whitespace, and numbers.\n",
    "        \"\"\"\n",
    "        text = text.lower().strip()\n",
    "        text = re.sub('<.*?>', '', text)\n",
    "        text = re.compile('[%s]' % re.escape(string.punctuation)).sub(' ', text)\n",
    "        text = re.sub('\\s+', ' ', text)\n",
    "        text = re.sub(r'\\[[0-9]*\\]', ' ', text)\n",
    "        text = re.sub(r'[^\\w\\s]', '', text)\n",
    "        text = re.sub(r'\\d', ' ', text)\n",
    "        text = re.sub(r'\\s+', ' ', text)\n",
    "        return text\n",
    "\n",
    "    def stopword_removal(self, text):\n",
    "        \"\"\"\n",
    "        Remove English stopwords.\n",
    "        \"\"\"\n",
    "        return ' '.join([word for word in text.split() if word not in stopwords.words('english')])\n",
    "\n",
    "    def lemmatizer(self, text):\n",
    "        \"\"\"\n",
    "        Lemmatize the text using NLTK's WordNetLemmatizer with POS tagging.\n",
    "        \"\"\"\n",
    "        lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "        def get_wordnet_pos(tag):\n",
    "            if tag.startswith('J'):\n",
    "                return wordnet.ADJ\n",
    "            elif tag.startswith('V'):\n",
    "                return wordnet.VERB\n",
    "            elif tag.startswith('N'):\n",
    "                return wordnet.NOUN\n",
    "            elif tag.startswith('R'):\n",
    "                return wordnet.ADV\n",
    "            else:\n",
    "                return wordnet.NOUN\n",
    "\n",
    "        word_pos_tags = nltk.pos_tag(word_tokenize(text))\n",
    "        lemmatized = [lemmatizer.lemmatize(word, get_wordnet_pos(tag)) for word, tag in word_pos_tags]\n",
    "        return ' '.join(lemmatized)\n",
    "\n",
    "    def finalpreprocess(self, text):\n",
    "        \"\"\"\n",
    "        Apply the full preprocessing pipeline: cleaning, stopword removal, and lemmatization.\n",
    "        \"\"\"\n",
    "        text = self.preprocess(text)\n",
    "        text = self.stopword_removal(text)\n",
    "        text = self.lemmatizer(text)\n",
    "        return text\n",
    "\n",
    "    def add_ngrams(self, tokens, n=3):\n",
    "        \"\"\"\n",
    "        Generate bigrams and trigrams from a list of tokens and return the tokens combined with these n-grams.\n",
    "        \"\"\"\n",
    "        bigrams = list(ngrams(tokens, 2))\n",
    "        trigrams = list(ngrams(tokens, 3))\n",
    "        bigrams = ['_'.join(bigram) for bigram in bigrams]\n",
    "        trigrams = ['_'.join(trigram) for trigram in trigrams]\n",
    "        return tokens + bigrams + trigrams\n",
    "\n",
    "    def run_analysis(self):\n",
    "        \"\"\"\n",
    "        Split the dataset, generate feature representations, train several classifiers,\n",
    "        and print evaluation metrics.\n",
    "        \"\"\"\n",
    "        # Split dataset into training and validation sets\n",
    "        X_train, X_val, y_train, y_val = train_test_split(\n",
    "            self.df['clean_text'], self.df[self.target_column],\n",
    "            test_size=self.test_size, shuffle=True, random_state=self.random_state\n",
    "        )\n",
    "\n",
    "        # Tokenize texts for Word2Vec transformation.\n",
    "        # Optionally add n-grams if specified.\n",
    "        if self.use_ngrams:\n",
    "            X_train_tok = [self.add_ngrams(word_tokenize(text)) for text in X_train]\n",
    "            X_val_tok = [self.add_ngrams(word_tokenize(text)) for text in X_val]\n",
    "        else:\n",
    "            X_train_tok = [word_tokenize(text) for text in X_train]\n",
    "            X_val_tok = [word_tokenize(text) for text in X_val]\n",
    "\n",
    "        # TF-IDF Vectorization on the clean text using passed parameters\n",
    "        tfidf_vectorizer = TfidfVectorizer(**self.tfidf_params)\n",
    "        X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
    "        X_val_tfidf = tfidf_vectorizer.transform(X_val)\n",
    "\n",
    "        # Word2Vec transformation using the mean embedding\n",
    "        X_train_w2v = self.mean_embedding_vectorizer.transform(X_train_tok)\n",
    "        X_val_w2v = self.mean_embedding_vectorizer.transform(X_val_tok)\n",
    "\n",
    "        # ----- Logistic Regression with TF-IDF -----\n",
    "        lr_tfidf = LogisticRegression(**self.lr_params)\n",
    "        lr_tfidf.fit(X_train_tfidf, y_train)\n",
    "        y_pred = lr_tfidf.predict(X_val_tfidf)\n",
    "        y_prob = lr_tfidf.predict_proba(X_val_tfidf)[:, 1]\n",
    "        print(\"Logistic Regression with TF-IDF\")\n",
    "        print(classification_report(y_val, y_pred))\n",
    "        print(\"Confusion Matrix:\\n\", confusion_matrix(y_val, y_pred))\n",
    "        fpr, tpr, _ = roc_curve(y_val, y_prob)\n",
    "        print(\"AUC:\", auc(fpr, tpr))\n",
    "\n",
    "        # ----- Naive Bayes with TF-IDF -----\n",
    "        nb_tfidf = MultinomialNB()\n",
    "        nb_tfidf.fit(X_train_tfidf, y_train)\n",
    "        y_pred = nb_tfidf.predict(X_val_tfidf)\n",
    "        y_prob = nb_tfidf.predict_proba(X_val_tfidf)[:, 1]\n",
    "        print(\"\\nNaive Bayes with TF-IDF\")\n",
    "        print(classification_report(y_val, y_pred))\n",
    "        print(\"Confusion Matrix:\\n\", confusion_matrix(y_val, y_pred))\n",
    "        fpr, tpr, _ = roc_curve(y_val, y_prob)\n",
    "        print(\"AUC:\", auc(fpr, tpr))\n",
    "\n",
    "        # ----- Logistic Regression with Word2Vec -----\n",
    "        lr_w2v = LogisticRegression(**self.lr_params)\n",
    "        lr_w2v.fit(X_train_w2v, y_train)\n",
    "        y_pred = lr_w2v.predict(X_val_w2v)\n",
    "        y_prob = lr_w2v.predict_proba(X_val_w2v)[:, 1]\n",
    "        print(\"\\nLogistic Regression with Word2Vec\")\n",
    "        print(classification_report(y_val, y_pred))\n",
    "        print(\"Confusion Matrix:\\n\", confusion_matrix(y_val, y_pred))\n",
    "        fpr, tpr, _ = roc_curve(y_val, y_prob)\n",
    "        print(\"AUC:\", auc(fpr, tpr))\n",
    "\n",
    "        # ----- Random Forest with Word2Vec -----\n",
    "        rf_w2v = RandomForestClassifier(**self.rf_params)\n",
    "        rf_w2v.fit(X_train_w2v, y_train)\n",
    "        y_pred = rf_w2v.predict(X_val_w2v)\n",
    "        y_prob = rf_w2v.predict_proba(X_val_w2v)[:, 1]\n",
    "        print(\"\\nRandom Forest with Word2Vec\")\n",
    "        print(classification_report(y_val, y_pred))\n",
    "        print(\"Confusion Matrix:\\n\", confusion_matrix(y_val, y_pred))\n",
    "        fpr, tpr, _ = roc_curve(y_val, y_prob)\n",
    "        print(\"AUC:\", auc(fpr, tpr))\n",
    "\n",
    "        # ----- Random Forest with TF-IDF -----\n",
    "        rf = RandomForestClassifier(**self.rf_params)\n",
    "        rf.fit(X_train_tfidf, y_train)\n",
    "        y_pred = rf.predict(X_val_tfidf)\n",
    "        y_prob = rf.predict_proba(X_val_tfidf)[:, 1]\n",
    "        print(\"\\nRandom Forest with TF-IDF\")\n",
    "        print(classification_report(y_val, y_pred))\n",
    "        print(\"Confusion Matrix:\\n\", confusion_matrix(y_val, y_pred))\n",
    "        fpr, tpr, _ = roc_curve(y_val, y_prob)\n",
    "        print(\"AUC:\", auc(fpr, tpr))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
